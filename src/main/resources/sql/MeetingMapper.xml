<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gaga.bo.service.meeting.MeetingDao">
 	

  <resultMap id="meetingResultMap" type="meeting">
    <id property="meetingNo" 				column="meeting_no" 			jdbcType="INTEGER" />
    <result property="entryFee" 			column="entry_fee" 				jdbcType="INTEGER" />
    <result property="meetingDate" 			column="meeting_date" 			jdbcType="DATE" />
    <result property="meetingStartTime" 	column="meeting_start_time" 	jdbcType="TIME" />
    <result property="meetingEndTime" 		column="meeting_end_time" 		jdbcType="TIME" />
    <result property="parentClubNo" 		column="parent_club_no" 		jdbcType="INTEGER" />
    <result property="meetingSuccess" 		column="meeting_success" 		jdbcType="INTEGER" />
    <result property="meetingAddr" 			column="meeting_addr" 			jdbcType="LONGVARCHAR" />
    <result property="meetingDetailAddr" 	column="meeting_detail_addr" 	jdbcType="LONGVARCHAR" />
    <result property="meetingLat" 			column="meeting_lat" 			jdbcType="DOUBLE" />
    <result property="meetingLng" 			column="meeting_lng" 			jdbcType="DOUBLE" />
    <result property="meetingName" 			column="meeting_name" 			jdbcType="VARCHAR" />
    <result property="meetingIntro" 		column="meeting_intro" 			jdbcType="LONGVARCHAR" />
    <result property="meetingLeaderNo" 		column="meeting_leader_no" 		jdbcType="INTEGER" />
    <result property="meetingMaxMemberNo" 	column="meeting_max_member_no" 	jdbcType="INTEGER" />
    <result property="meetingRegDate" 		column="meeting_reg_date" 		jdbcType="TIMESTAMP" />
    <result property="meetingState" 		column="meeting_state" 			jdbcType="INTEGER" />
    <result property="meetingImg" 			column="meeting_img" 			jdbcType="LONGVARCHAR" />
    <result property="filterGender" 		column="filter_gender" 			jdbcType="INTEGER" />
    <result property="filterMinAge" 		column="filter_min_age" 		jdbcType="INTEGER" />
    <result property="filterMaxAge" 		column="filter_max_age" 		jdbcType="INTEGER" />
    <result property="mainCategoryNo" 		column="main_category_no" 		jdbcType="INTEGER"/>
    <result property="filterTag" 			column="filter_tag" 			jdbcType="LONGVARCHAR" />
    <result property="adjustmentTime" 		column="adjustment_time" 		jdbcType="TIMESTAMP" />
    <result property="adjustmentState" 		column="adjustment_state" 		jdbcType="INTEGER" />
    <result property="accountNo" 			column="account_no"				jdbcType="VARCHAR" />
    <result property="bankName" 			column="bank_name" 				jdbcType="VARCHAR" />
    <result property="count" 				column="count" 					jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="meetingReviewResultMap" type="meetingReview">
    <id property="meetingReviewNo" 				column="meeting_review_no" 			jdbcType="INTEGER" />
    <result property="meetingNo" 				column="meeting_no" 				jdbcType="INTEGER" />
    <result property="meetingScore" 			column="meeting_score" 				jdbcType="FLOAT" />
    <result property="meetingReviewImg" 		column="meeting_review_img" 		jdbcType="LONGVARCHAR" />
    <result property="meetingReviewContent" 	column="meeting_review_content" 	jdbcType="LONGVARCHAR" />
    <result property="meetingReviewerNo" 		column="meeting_reviewer_no" 		jdbcType="INTEGER" />
    <result property="meetingReviewDate" 		column="meeting_review_date" 		jdbcType="TIMESTAMP" />
    <result property="meetingReviewrNickName" 	column="meeting_reviewer_nick_name" jdbcType="LONGVARCHAR" />
  </resultMap>
  
 <resultMap id="mainCategoryResultMap" type="java.util.HashMap">
    <id property="mainCategoryNo" 		column="main_category_no" 	jdbcType="INTEGER" />
    <result property="mainCategoryName" column="main_category_name" jdbcType="VARCHAR" />
</resultMap>

<resultMap id="subCategoryResultMap" type="java.util.HashMap">
    <id property="tag" 					column="tag" 				jdbcType="VARCHAR" />
    <result property="mainCategoryNo" 	column="main_category_no" 	jdbcType="INTEGER" />
</resultMap>
	
	
<!-- 미팅 파트 -->	
<!--  미팅 하나 조회 -->
<select id="getMeeting" parameterType="int" resultMap="meetingResultMap">
  SELECT
    meeting_no,
    entry_fee,
    meeting_date,
    meeting_start_time,
    meeting_end_time,
    parent_club_no,
    meeting_success,
    meeting_addr,
    meeting_detail_addr,
    meeting_lat,
    meeting_lng,
    meeting_name,
    meeting_intro,
    meeting_leader_no,
    meeting_max_member_no,
    meeting_reg_date,
    meeting_state,
    meeting_img,
    filter_gender,
    filter_min_age,
    filter_max_age,
    filter_tag,
    (SELECT COUNT(*) +1 FROM members WHERE state = 2 AND meeting_no = m.meeting_no) AS count
  FROM
    meetings AS m
  WHERE
    meeting_no = #{meetingNo}
</select>

  
 <!-- 부모 클럽에 속하는 미팅 리스트 조회-->
<select id="getMeetingListFromParentClubNo" parameterType="int" resultMap="meetingResultMap">
  SELECT
    meeting_no,
    entry_fee,
    meeting_date,
    meeting_start_time,
    meeting_end_time,
    parent_club_no,
    meeting_success,
    meeting_addr,
    meeting_detail_addr,
    meeting_lat,
    meeting_lng,
    meeting_name,
    meeting_intro,
    meeting_leader_no,
    meeting_max_member_no,
    meeting_reg_date,
    meeting_state,
    meeting_img,
    filter_gender,
    filter_min_age,
    filter_max_age,
    main_category_no,
    filter_tag,
    (SELECT COUNT(*) +1 FROM members WHERE state = 2 AND meeting_no = m.meeting_no) AS count
  FROM
    meetings AS m
  WHERE
    parent_club_no = #{clubNo}
  AND
  	meeting_state IN (1, 2, 3)
</select>
 
  
    <!-- 회원의 나의 미팅 리스트 조회 -->
<select id="getMyMeetingList" parameterType="int" resultMap="meetingResultMap">
  SELECT 
    m.meeting_no,
    m.entry_fee,
    m.meeting_date,
    m.meeting_start_time,
    m.meeting_end_time,
    m.parent_club_no,
    m.meeting_success,
    m.meeting_addr,
    m.meeting_detail_addr,
    m.meeting_lat,
    m.meeting_lng,
    m.meeting_name,
    m.meeting_intro,
    m.meeting_leader_no,
    m.meeting_max_member_no,
    m.meeting_reg_date,
    m.meeting_state,
    m.meeting_img,
    m.filter_gender,
    m.filter_min_age,
    m.filter_max_age,
    m.main_category_no,
    m.filter_tag,
    m.adjustment_time,
    m.adjustment_state,
    m.account_no,
    m.bank_name,
    (SELECT COUNT(*) +1 FROM members WHERE state = 2 AND meeting_no = m.meeting_no) AS count,
    mb.state
  FROM meetings m
  LEFT JOIN 
  	(SELECT meeting_no, user_no, state
  		FROM members
  		WHERE user_no = #{userNo}) mb 
  ON 
  	m.meeting_no = mb.meeting_no
  WHERE 
  	mb.user_no = #{userNo}
  OR 
  	m.meeting_leader_no = #{userNo}
  AND
  	m.meeting_state IN (1, 2, 3)
  ORDER BY m.meeting_success ASC, m.meeting_date ASC
</select>

  
  <!-- 채팅방이 있는 미팅 리스트 조회 (getMeetingListInChat)-->
  <select id="getMeetingListInChat" parameterType="int" resultMap="meetingResultMap">
  SELECT 
    m.meeting_no,
    m.entry_fee,
    m.meeting_date,
    m.meeting_start_time,
    m.meeting_end_time,
    m.parent_club_no,
    m.meeting_success,
    m.meeting_addr,
    m.meeting_detail_addr,
    m.meeting_lat,
    m.meeting_lng,
    m.meeting_name,
    m.meeting_intro,
    m.meeting_leader_no,
    m.meeting_max_member_no,
    m.meeting_reg_date,
    m.meeting_state,
    m.meeting_img,
    m.filter_gender,
    m.filter_min_age,
    m.filter_max_age,
    m.main_category_no,
    m.filter_tag,
    m.adjustment_time,
    m.adjustment_state,
    m.account_no,
    m.bank_name,
    (SELECT COUNT(*) +1 FROM members WHERE state = 2 AND meeting_no = m.meeting_no) AS count,
    mb.state
  FROM meetings m
  LEFT JOIN 
  	(SELECT meeting_no, user_no, state
  		FROM members
  		WHERE user_no = #{userNo}) mb 
  ON 
  	m.meeting_no = mb.meeting_no
  WHERE 
  	mb.user_no = #{userNo}
  OR 
  	m.meeting_leader_no = #{userNo}
  AND
  	m.meeting_state IN (1, 2, 3)
  AND
  	mb.state IN ( 0, 2)
  ORDER BY m.meeting_success ASC, m.meeting_date ASC
</select>
  
  
  <!-- 미팅 리스트 조회 구현 (getMeetingList)-->
   <select id="getMeetingList" parameterType="filter" resultMap="meetingResultMap">
    SELECT
    meeting_no,
    entry_fee,
    meeting_date,
    meeting_start_time,
    meeting_end_time,
    meeting_addr,
    meeting_detail_addr,
    meeting_lat,
    meeting_lng,
    meeting_name,
    meeting_intro,
    meeting_leader_no,
    meeting_max_member_no,
    meeting_reg_date,
    meeting_state,
    meeting_img,
    filter_gender,
    filter_min_age,
    filter_max_age,
    main_category_no,
    meeting_success,
    filter_tag,
    (SELECT COUNT(*) +1 FROM members WHERE state = 2 AND meeting_no = m.meeting_no) AS count
  FROM
    meetings AS m
  WHERE
    meeting_state = 1
    
  AND
	filter_gender = #{gender:INTEGER}
  AND
	filter_min_age &lt;= #{maxAge:INTEGER}
  AND
   filter_max_age &gt;= #{minAge:INTEGER}
  AND
   #{age:INTEGER} BETWEEN filter_min_age and filter_max_age
    <if test="mainCategoryNo != null and mainCategoryNo != 0">
  	AND main_category_no =  #{mainCategoryNo:INTEGER}
  </if>
  <if test="tag != null and tag !=''">
  	AND filter_tag IN (#{tag : LONGVARCHAR}, #{tag2 : LONGVARCHAR}, #{tag3 : LONGVARCHAR})
  </if>
  AND
   meeting_lat BETWEEN #{swLat:DOUBLE} AND #{neLat:DOUBLE}
  AND
   meeting_lng BETWEEN #{swLng:DOUBLE} AND #{neLng:DOUBLE};
   </select>
   
     <!-- 미팅 리스트 검색 구현 (getMeetingListByKeyword)-->
	<select id="getMeetingListByKeyword" parameterType="search" resultMap="meetingResultMap">
	  SELECT *,
	  (SELECT COUNT(*) + 1 FROM members WHERE state = 2 AND meeting_no = m.meeting_no) AS count
	  FROM meetings AS m
	  WHERE (meeting_addr LIKE CONCAT('%', #{searchKeyword}, '%')
	     OR meeting_detail_addr LIKE CONCAT('%', #{searchKeyword}, '%')
	     OR meeting_name LIKE CONCAT('%', #{searchKeyword}, '%')
	     OR meeting_intro LIKE CONCAT('%', #{searchKeyword}, '%') )
	     AND meeting_state = 1
	  LIMIT #{pageSize} OFFSET ${(currentPage - 1) * pageSize}
	</select>
  
  <!-- 미팅 생성 -->
<insert id="addMeeting" parameterType="Meeting" useGeneratedKeys="true" keyProperty="meetingNo" keyColumn="meeting_no">
  INSERT INTO meetings (
    entry_fee,
    meeting_date,
    meeting_start_time,
    meeting_end_time,
    parent_club_no,
    meeting_success,
    meeting_addr,
    meeting_detail_addr,
    meeting_lat,
    meeting_lng,
    meeting_name,
    meeting_intro,
    meeting_leader_no,
    meeting_max_member_no,
    meeting_reg_date,
    meeting_state,
    meeting_img,
    filter_gender,
    filter_min_age,
    filter_max_age,
    main_category_no,
    filter_tag
  )
  VALUES (
    #{entryFee:INTEGER},
    #{meetingDate:DATE},
    #{meetingStartTime:TIME},
    #{meetingEndTime:TIME},
    <if test="parentClubNo!=0">
      #{parentClubNo:INTEGER}
    </if>
    <if test="parentClubNo==0">
      null
    </if>,
    1,
    #{meetingAddr:LONGVARCHAR},
    #{meetingDetailAddr:LONGVARCHAR},
    #{meetingLat:DOUBLE},
    #{meetingLng:DOUBLE},
    #{meetingName:VARCHAR},
    #{meetingIntro:LONGVARCHAR},
    #{meetingLeaderNo:INTEGER},
    #{meetingMaxMemberNo:INTEGER},
    now(),
    1,
    #{meetingImg:LONGVARCHAR},
    #{filterGender:INTEGER},
    #{filterMinAge:INTEGER},
    #{filterMaxAge:INTEGER},
    #{mainCategoryNo:INTEGER},
    #{filterTag:LONGVARCHAR}
  )
</insert>

  
  
  <!-- 미팅 모집중 정보 수정 -->
<update id="updateMeeting" parameterType="Meeting">
  UPDATE meetings
  SET
    meeting_date = #{meetingDate},
    meeting_start_time = #{meetingStartTime},
    meeting_end_time = #{meetingEndTime},
    meeting_name = #{meetingName},
    meeting_intro = #{meetingIntro},
    meeting_max_member_no = #{meetingMaxMemberNo},
    meeting_state = #{meetingState},
    meeting_img = #{meetingImg},
    filter_gender = #{filterGender},
    filter_min_age = #{filterMinAge},
    filter_max_age = #{filterMaxAge}
  WHERE
    meeting_no = #{meetingNo}
</update>

  
  <!-- 미팅 성사 및 결제정보 수정 -->
<update id="updateMeetingSuccess" parameterType="Meeting">
  UPDATE meetings
  SET
    meeting_success = 2,
    meeting_state = 1,
    account_no = #{accountNo},
    bank_name = #{bankName}
  WHERE
    meeting_no = #{meetingNo}
</update>

  
  <!-- 미팅 삭제 -->
  <update id="deleteMeeting" parameterType="int">
  UPDATE meetings
  SET
    meeting_state = 4
  WHERE
    meeting_no = #{meetingNo}
  </update>
  
  
  
  
  <!-- 미팅 신청 파트 -->
  <!-- 미팅 신청시 회원 추가 -->
  <insert id="addMeetingMember" parameterType="Map">
    INSERT INTO members (user_no, meeting_no, state)
    VALUES (#{userNo}, #{meetingNo}, 1)
  </insert>
  
 <!-- 신청 멤버를 확정 멤버로 변경(updateMeetingMemberState) -->
  <update id="updateMember" parameterType="Map">
    UPDATE members
    SET 
    	state = #{state},
    	confirmed_time = NOW()
    WHERE meeting_no = #{meetingNo}
    AND user_no = #{userNo}
  </update>
  
  
    <!-- 미팅 멤버 삭제 -->
    <delete id="deleteMeetingMember" parameterType="Map">
    DELETE FROM members
    WHERE meeting_no = #{meetingNo}
    AND user_no = #{userNo}
  </delete>
  
  
  
  
   <!-- 미팅 리뷰 파트 -->
  <!-- 미팅 리뷰 하나 조회 -->
  <select id="getMeetingReview" parameterType="int" resultMap="meetingReviewResultMap">
    SELECT *
    FROM meeting_reviews
    WHERE meeting_review_no = #{meetingReviewNo}
  </select>
  
  <!-- 미팅 리뷰 리스트 조회 -->
<select id="getMeetingReviewList" parameterType="int" resultMap="meetingReviewResultMap">
  SELECT 
  	meeting_review_no,
    meeting_no,
    meeting_score,
    meeting_review_img,
    meeting_review_content,
    meeting_reviewer_no,
    meeting_review_date,
    (SELECT nick_name FROM users WHERE user_no = m.meeting_reviewer_no) meeting_reviewer_nick_name
  FROM
    meeting_reviews AS m
  WHERE
    meeting_no = #{meetingNo}
</select>


  <!-- 미팅 리뷰 추가 -->
<insert id="addMeetingReview" parameterType="meetingReview">
  INSERT INTO meeting_reviews (
    meeting_no,
    meeting_score,
    meeting_review_img,
    meeting_review_content,
    meeting_reviewer_no,
    meeting_review_date
  )
  VALUES (
    #{meetingNo},
    #{meetingScore},
    #{meetingReviewImg},
    #{meetingReviewContent},
    #{meetingReviewerNo},
    now()
  )
</insert>

  
  <!-- 미팅 정보 수정 -->
<update id="updateMeetingReview" parameterType="meetingReview">
  UPDATE meeting_reviews
  SET
    meeting_score = #{meetingScore},
    meeting_review_img = #{meetingReviewImg},
    meeting_review_content = #{meetingReviewContent}
  WHERE
    meeting_review_no = #{meetingReviewNo}
</update>

  
   <!-- 미팅 리뷰 삭제 -->
  <delete id="deleteMeetingReview" parameterType="int">
    DELETE FROM meeting_reviews
    WHERE meeting_review_no = #{meetingReviewNo}
  </delete>

  
  <!-- 대분류 카테고리 출력 -->
 <select id="getMainCategory" resultMap="mainCategoryResultMap">
    SELECT 
    	main_category_no,
    	main_category_name
  	FROM
  		group_main_category
  </select>
    
  
  <!-- 대분류 카테고리 선택 시 하위 카테고리 출력 (getSubCategory)-->
  <select id="getSubCategory" resultMap="subCategoryResultMap">
    SELECT
    	main_category_no,
    	tag
  	FROM
  		group_sub_category
  </select>
  

</mapper>