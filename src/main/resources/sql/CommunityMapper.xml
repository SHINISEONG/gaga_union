<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gaga.bo.service.community.CommunityDao">


 <resultMap id="reportResultMap" type="report">
    <id column="report_no" property="reportNo" jdbcType="INTEGER"/>
    <result column="reporting_no" property="reportingNo" jdbcType="INTEGER"/>
    <result column="reporting_id" property="reportingId" jdbcType="VARCHAR"/>
    <result column="reporting_nick_name" property="reportingNickName" jdbcType="VARCHAR"/>
    <result column="reported_no" property="reportedNo" jdbcType="INTEGER"/>
    <result column="reported_id" property="reportedId" jdbcType="VARCHAR"/>
    <result column="reported_nick_name" property="reportedNickName" jdbcType="VARCHAR"/>
    <result column="report_category_no" property="reportCategoryNo" jdbcType="INTEGER"/>
    <result column="report_content" property="reportContent" jdbcType="VARCHAR"/>
    <result column="report_date" property="reportDate" jdbcType="TIMESTAMP"/>
    <result column="report_img" property="reportImg" jdbcType="VARCHAR"/>
    <result column="report_img2" property="reportImg2" jdbcType="VARCHAR"/>
    <result column="report_img3" property="reportImg3" jdbcType="VARCHAR"/>
  </resultMap>
  
  <resultMap id="userReviewResultMap" type="userReview">
    <id column="user_review_no" property="userReviewNo" jdbcType="INTEGER"/>
    <result column="reviewer_no" property="reviewerNo" jdbcType="INTEGER"/>
    <result column="reviewed_no" property="reviewedNo" jdbcType="INTEGER"/>
    <result column="user_score" property="userScore" jdbcType="INTEGER"/>
  </resultMap>

  <resultMap id="titleResultMap" type="title">
    <id column="title_no" property="titleNo" jdbcType="INTEGER"/>
    <result column="title_name" property="titleName" jdbcType="VARCHAR"/>
  </resultMap>
  
  <!-- ReportQueries -->
	
	  <!-- InsertQueries -->
	  <insert id="addReport" parameterType="com.gaga.bo.service.domain.Report">
	    INSERT INTO reports (reporting_no, reported_no, report_category_no, report_content, report_date, report_img, report_img2, report_img3)
	    VALUES (#{reportingNo:INTEGER}, #{reportedNo:INTEGER}, #{reportCategoryNo:INTEGER},
	            #{reportContent:VARCHAR}, now(), #{reportImg:VARCHAR},
	            #{reportImg2:VARCHAR}, #{reportImg3:VARCHAR})
	  </insert>
	  
  	<!-- SelectOneQuery -->
  	<select id="getReport" parameterType="int" resultMap="reportResultMap">
		  SELECT
		    r.report_no,
		    r.reporting_no,
		    r.reported_no,
		    r.report_category_no,
		    r.report_content,
		    r.report_date,
		    r.report_img,
		    r.report_img2,
		    r.report_img3,
		    reporting.user_id AS reporting_id,
		    reported.user_id AS reported_id,
		    reporting.nick_name AS reporting_nick_name,
		    reported.nick_name AS reported_nick_name
		  FROM reports AS r
		  INNER JOIN users AS reporting ON r.reporting_no = reporting.user_no
		  INNER JOIN users AS reported ON r.reported_no = reported.user_no
		  WHERE r.report_no = #{reportNo}
  	</select>
  	<!-- SelectOneQuery -->
  	<select id="getReportByUserNo" parameterType="report" resultMap="reportResultMap">
  	  	SELECT 
            report_no,
            reporting_no,
            reported_no,
            report_category_no,
            report_content,
            report_date,
            report_img,
            report_img2,
            report_img3
        FROM reports
        <where>
      	  reporting_no = #{reportingNo}
      	  AND reported_no = #{reportedNo}
        </where>
  	</select>
	  <!-- SelectListQuery -->
		<select id="getReportList" parameterType="user" resultMap="reportResultMap">
		  SELECT 
		    r.report_no,
		    r.reporting_no,
		    r.reported_no,
		    r.report_category_no,
		    r.report_date,
		    reporting.user_id AS reporting_id,
		    reported.user_id AS reported_id,
		    reporting.nick_name AS reporting_nick_name,
		    reported.nick_name AS reported_nick_name
		  FROM reports AS r
		  INNER JOIN users AS reporting ON r.reporting_no = reporting.user_no
		  INNER JOIN users AS reported ON r.reported_no = reported.user_no
		  <where>
		    <if test="role == 0">
		      reporting.user_no = #{userNo}
		    </if>
		  </where>
		</select>
		
		<!-- UpdateQuery -->
		<update id="updateReport" parameterType="report">
        UPDATE reports
        SET 
            reporting_no = #{reportingNo},
            reported_no = #{reportedNo},
            report_category_no = #{reportCategoryNo},
            report_content = #{reportContent},
            report_date = #{reportDate},
            report_img = #{reportImg},
            report_img2 = #{reportImg2},
            report_img3 = #{reportImg3}
        WHERE report_no = #{reportNo}
    </update>
		
		<!-- DeleteQuery -->
		<delete id="deleteReport" parameterType="int">
			DELETE FROM reports
			WHERE report_no = #{reportNo}
		</delete>    
		
  <!-- ReviewQueries -->
  
  	<!-- InsertQuery -->
	  <insert id="addUserReview" parameterType="userReview">
    	INSERT INTO user_reviews (
      	reviewer_no,
				reviewed_no,
				user_score
			) VALUES (
				#{reviewerNo},
				#{reviewedNo},
				#{userScore}
			)
    </insert>
    
    <!-- SelectOneQuery -->
    <select id="getUserReview" parameterType="userReview" resultMap="userReviewResultMap">
    	SELECT user_review_no, reviewer_no, reviewed_no, user_score
    	FROM user_reviews
    	<where>
    		reviewer_no=#{reviewerNo}
    		AND reviewed_no=#{reviewedNo}
    	</where>
    </select>
    
    <!-- UpdateQuery -->
    <update id="updateUserReview" parameterType="userReview">
        UPDATE user_reviews
        <set> 
          user_score = #{userScore}
        </set>
        <where>
    			reviewer_no=#{reviewerNo}
    			AND reviewed_no=#{reviewedNo}
     		</where>
    </update>
    
    <!-- DeleteQuery -->
    <delete id="deleteUserReview" parameterType="userReview">
    	DELETE FROM user_reviews
      <where>
    		reviewer_no=#{reviewerNo}
    		AND reviewed_no=#{reviewedNo}
     	</where>
    </delete>
    
	<!-- TitleQueries -->
		<!-- SELECT List Query -->
		<select id="getUserEarnedTitleList" resultMap="titleResultMap">
			SELECT t.title_no, t.title_name
			FROM titles t
			JOIN user_earned_titles uet
			ON t.title_no = uet.title_no
			WHERE uet.user_no = #{userNo}
		</select>
		<!-- INSERT Query -->
				<!-- map parameter keys = userNo, leaderState, mainCategoryNo -->
		<insert id="addUserEarnedTitle" parameterType ="map">
			INSERT INTO user_earned_titles (user_no, title_no)
			SELECT #{userNo}, t.title_no
			FROM titles t
			<where>
			<if test = "leaderState == 1">
			t.leader_state = 1
			</if>
			<if test = "leaderState == 0">
			t.leader_state = 0
			</if>
			<if test ="mainCategoryNo == 0"> 
	  	AND t.main_category_no = 0      
	  	</if>
	  	<if test ="mainCategoryNo != 0"> 
	  	AND t.main_category_no = #{mainCategoryNo}      
	  	</if>
      AND t.count &lt;= (
      									<if test = "leaderState == 1">
      									 SELECT COUNT(*)
                  			 FROM meetings m
                  			 <where>
                  			  m.meeting_success = 1
                  			 	AND m.meeting_leader_no = #{userNo}
                  			 	<if test ="mainCategoryNo != 0">
                  			 	AND m.main_category_no = #{mainCategoryNo}
                  			 	</if>
                  			 </where>
                  			</if>
                  			<if test = "leaderState == 0">
      										 SELECT COUNT(*)
													 FROM members mb
													 JOIN meetings mt 
													 ON mb.meeting_no = mt.meeting_no
											 		 <where>
														mt.meeting_success = 1
														AND (mb.state=2 OR mb.state=3)
														AND mb.user_no = #{userNo}
														<if test="mainCategoryNo != 0">
															AND mt.main_category_no = #{mainCategoryNo}
														</if>
											 		 </where>
                  			 </if> 
                  			)
			AND NOT EXISTS (
											SELECT 1 
        		          FROM user_earned_titles uet
            		      WHERE uet.title_no = t.title_no 
            		      AND uet.user_no = #{userNo}
                     )
      </where>
		</insert>
		<!-- SelectCountQueries 
		<in id="countSuccessMeeting" parameterType = "int">
			SELECT COUNT(meeting_no) 
			FROM meetings
			<where>
				meeting_leader_no = #{userNo}
				AND meeting_success = 1
			</where>
		</select>
		-->
	<!-- ffffff
		<select id="countEarnedClub" parameterType = "int">
			SELECT COUNT(club_no) 
			FROM clubs
			<where>
				club_leader_no = #{userNo}
			</where>
		</select>
		
		<select>
			SELECT COUNT
		</select>
				 -->
		<!--  InsertQueries -->
    

</mapper>